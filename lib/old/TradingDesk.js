/* TRADING DESK

TradingDesk.js keeps the logic loop going for the strategy and falcilitates trading
    by providing all neccesary data to a strategy.

Basic proces:
Set up all exchanges
Set up utilities

if backtest == true:
backtest();
else:
runTrading();
*/

// This will be generated by the user.
// Template config file [Not currently used]
// TODO: dicuss how to pass proper params to strategies
/*
var config = {
  liveTrading: true,
  backtestMode: false,
<<<<<<< HEAD
  strategyName: "simple-arbitrage",       // exponential moving average
  exchanges:    "all",                 // exchanges strategy will trade
  pair:         "BTCUSD",                 // or "none" for every pair
  capital:      3000,                     // starting capital
  timeFrame:    4,                        // how long to trade
  interval:     1000,
  API_KEYS:     {poloniex:"123XYZ", gdax:"123ABC"}
=======
  strategyName: 'simple-arbitrage',       // exponential moving average
  exchanges: ['GDAX'],                 // exchanges strategy will trade
  pair: 'BTCUSD',                 // or "none" for every pair
  capital: 3000,                     // starting capital
  timeFrame: 4,                        // how long to trade
  interval: 1000,
  blah: 'other param',
  API_KEYS: ['123XYZ']

  // strategyParams: {}
>>>>>>> master
}
*/
/*
TODO: Make this set-up procedure the goal!
var exchanges   = getExchanges();
var TradingHub  = new TradingHub(config.exchanges[0]);
var DataHub     = TradingHub.createOrderbooks();
var orderbook   = DataHub.getOrderbooks();
*/

// Set up all necessary data
var obParse         = require("./exchanges/map-parsing.js");
//var arbitrage       = require("./strategies/simple-arbitrage.js").largestSpreadArbitrage;
var Order           = require("./strategies/simple-arbitrage.js").order;
var allExchangeData = require("./DataHub.js");
var triangularArbitrage = require("./strategies/triangularArbitrage");


//TODO: Implement a driver functino that calls the specified strategy. Look up Issue #3
var count = 0;
async.whilst(
  function() { return count < 5000; },   // this will be replaced with a timer
  function(callback) {
    count++;
    var order = triangularArbitrage.financeData;
    setTimeout(function() {     // delay
      callback(null, count);
    }, 2000);
  },

  function (err, n) {
    console.log("FINISHED");
  }
);

/*
// TODO: Implement while loop that runs strategy for specified time.
var runLiveTrading = function(config) {

  var strategy = require("./strategies/" + config.strategyName + ".js").strategy;
  //arbitrage("BTCUSD", 1000);
  //var exch = allExchangeData(["gdax"],["BTCUSD"]);
  //var exch = allExchangeData(["bitfinex"],["BTCUSD"]);
  //var exch = allExchangeData("all",["BTCUSD"]);
  //var exch = allExchangeData("all",["ETHBTC"]);
  var exch = allExchangeData(config.exchanges, [config.pair])
  exch.open();

  setInterval(function(){

    var order = strategy(exch, config.pair);
    console.log(order);
  }, config.interval)

  //TODO: [See previous To-do]

}
*/

//module.exports = runLiveTrading

// TODO: Also export data to server with SocketIO for client-side visualizations
